name: Build Video Dimmer

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write
  packages: write
  issues: write

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        include:
          - os: macos-latest
            build_command: npm run build:mac
          - os: ubuntu-latest
            build_command: npm run build:linux
          - os: windows-latest
            build_command: npm run build:win

    runs-on: ${{ matrix.os }}

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 16
          cache: 'npm'

      - name: Add author field (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          $json = Get-Content package.json | ConvertFrom-Json
          $json.author = @{
            name = "Video Dimmer Team"
            email = "videodimmer@example.com"
          }
          $json | ConvertTo-Json -Depth 32 | Set-Content package.json

      - name: Add author field (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          node -e 'const fs=require("fs"); const p=JSON.parse(fs.readFileSync("package.json")); p.author={name:"Video Dimmer Team", email:"videodimmer@example.com"}; fs.writeFileSync("package.json", JSON.stringify(p, null, 2))'

      - name: Install dependencies
        run: npm install

      - name: Build Electron app
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: ${{ matrix.build_command }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-build
          path: |
            dist/*.exe
            dist/*.dmg
            dist/*.AppImage
            dist/*.deb
            dist/*.rpm
            dist/*.zip
          if-no-files-found: ignore
          retention-days: 5

  create-release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Create Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          draft: false
          prerelease: false
          files: |
            **/*.exe
            **/*.dmg
            **/*.AppImage
            **/*.deb
            **/*.rpm
            **/*.zip
          generate_release_notes: true
